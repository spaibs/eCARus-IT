#functions for platform detection

macro(eb_test_and_set VAR_NAME VALUE PARENT_SCOPE)
    if(NOT ${VAR_NAME})
        set(${VAR_NAME} ${VALUE} ${PARENT_SCOPE})
    endif()
endmacro()

function(eb_determine_arch_vs)
    if(CMAKE_GENERATOR MATCHES "ARMV4I")
        eb_test_and_set(EB_PLATFORM_ARCH ARM PARENT_SCOPE)
        set(EBProduct_Arch  "ARMV4I"         PARENT_SCOPE)
    elseif(CMAKE_GENERATOR MATCHES "SH4")
        eb_test_and_set(EB_PLATFORM_ARCH SH4 PARENT_SCOPE)
        set(EBProduct_Arch "SH4"             PARENT_SCOPE)
    else()
        eb_test_and_set(EB_PLATFORM_ARCH X86 PARENT_SCOPE)
        set(EBProduct_Arch  "x86"            PARENT_SCOPE)
    endif()
endfunction(eb_determine_arch_vs)

function(eb_determine_sdk_vs)
    if(CMAKE_GENERATOR MATCHES "Visual Studio [0-9.]+ 20[0-9][0-9] *([^(]*)")
        string(STRIP "${CMAKE_MATCH_1}" VS_SDK_String)
        # whitespaces are evil in paths. since we use the SDK name in paths, we exchange them with underscores
        string(REPLACE " " "_" VS_SDK_String "${VS_SDK_String}")
    else()
        set(VS_SDK_String "")
    endif()

    # mapping done.
    if(VS_SDK_String)
        eb_test_and_set(EB_PLATFORM_OS "WinCE" PARENT_SCOPE)
    else()
        eb_test_and_set(EB_PLATFORM_OS "Win32" PARENT_SCOPE)
    endif(VS_SDK_String)
endfunction(eb_determine_sdk_vs)

function(eb_determine_toolchain_vs)
    if(CMAKE_GENERATOR MATCHES "Visual Studio [0-9.]+ (20[0-9][0-9])")
        set(EB_PLATFORM_TOOLCHAIN "vs${CMAKE_MATCH_1}" PARENT_SCOPE)
    else()
        message("unknown visual studio version")
        message("the new experimental packages feature will not work for you")
        set(EB_PLATFORM_TOOLCHAIN "unknown_studio_version" PARENT_SCOPE)
    endif()
endfunction(eb_determine_toolchain_vs)

function(eb_determine_toolchain_gcc)
    if(CMAKE_CXX_COMPILER)
        execute_process(
            COMMAND "${CMAKE_CXX_COMPILER}" --version
            OUTPUT_VARIABLE COMPILER_VERSION
        )
        string(REGEX MATCH " [0-9]\\.[0-9]\\.[0-9]" COMPILER_VERSION "${COMPILER_VERSION}")
        string(REGEX REPLACE " " "-" COMPILER_VERSION "${COMPILER_VERSION}")
    else(CMAKE_CXX_COMPILER)
        message(FATAL_ERROR "unable to determine compiler version")
    endif(CMAKE_CXX_COMPILER)
    set(EB_PLATFORM_TOOLCHAIN "gcc${COMPILER_VERSION}" PARENT_SCOPE)
endfunction(eb_determine_toolchain_gcc)

function(eb_determine_arch_gcc)
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "ARM")
        eb_test_and_set(EB_PLATFORM_ARCH ARM PARENT_SCOPE)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "SH4")
        eb_test_and_set(EB_PLATFORM_ARCH SH4 PARENT_SCOPE)
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "[xX]86")
        eb_test_and_set(EB_PLATFORM_ARCH X86 PARENT_SCOPE)
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "i686")
        eb_test_and_set(EB_PLATFORM_ARCH X86 PARENT_SCOPE)
    else()
        message(FATAL_ERROR "unsupported architecture. CMAKE_SYSTEM_PROCESSOR is '${CMAKE_SYSTEM_PROCESSOR}'")
    endif()
endfunction(eb_determine_arch_gcc)

macro(eb_determine_platform_variable VAR_NAME)
    if(${VAR_NAME})
        STRING(TOUPPER ${${VAR_NAME}} VAR_CONTENT)
        set(${VAR_NAME}_${VAR_CONTENT} TRUE)
        message(STATUS "${VAR_NAME}: ${${VAR_NAME}}")
    else()
        set(${VAR_NAME} unknown)
        message(FATAL_ERROR "${VAR_NAME}: ${${VAR_NAME}}")
    endif()
endmacro()

macro(eb_determine_platform)
    if(CMAKE_GENERATOR MATCHES "Visual Studio")
        eb_determine_toolchain_vs()
        eb_determine_arch_vs()
        eb_determine_sdk_vs()
        eb_test_and_set(EB_PLATFORM_OS_FAMILY "Windows" "")
    elseif(CMAKE_GENERATOR MATCHES "Unix")
        eb_determine_toolchain_gcc()
        eb_determine_arch_gcc()
        if(CMAKE_SYSTEM_NAME MATCHES "QNX")
            eb_test_and_set(EB_PLATFORM_OS QNX "")
            eb_test_and_set(EB_PLATFORM_OS_FAMILY POSIX "")
        elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
            eb_test_and_set(EB_PLATFORM_OS "Linux" "")
            eb_test_and_set(EB_PLATFORM_OS_FAMILY POSIX "")
        elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
            eb_test_and_set(EB_PLATFORM_OS "Win32" "")
            eb_test_and_set(EB_PLATFORM_OS_FAMILY "Windows" "")
        elseif(CMAKE_SYSTEM_NAME STREQUAL TKERNEL)
            eb_test_and_set(EB_PLATFORM_OS TKERNEL "")
            eb_test_and_set(EB_PLATFORM_OS_FAMILY TKERNEL "")
        endif()
    endif()

    # -------------------------------
    # Create platform variables and print status messages
    eb_determine_platform_variable(EB_PLATFORM_ARCH)
    eb_determine_platform_variable(EB_PLATFORM_OS_FAMILY)
    eb_determine_platform_variable(EB_PLATFORM_OS)
endmacro()

#perform platform detection
eb_determine_platform()
